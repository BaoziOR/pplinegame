//loading.js
var utilLog = require('./../../utils/util.js').log;//log
var consts = require('./../../utils/consts.js').consts;//const数据
var jsonf = require('./../../data/levelf.js').levelf;//关卡数据
var jsons = require('./../../data/levels.js').levels;//关卡数据
var json3 = require('./../../data/level3.js').levels;//关卡数据
var jsonSp = require('./../../data/levelSpecial.js').sLevel;//关卡数据
var config = require('./../../data/config.js').config;//配置数据
var openConf = require('./../../data/config.js').openConfig;//配置解锁数据
// var dollConf = require('./../../data/config.js').dollConfig;//配置抓娃娃数据
var bonusCfg = require('./../../data/config.js').bonusConfig;
var skinConfig = require('./../../data/config.js').skinConfig;

var app = getApp();
var that;
var isFirstComplate = false;

Page({

  /**
   * 页面的初始数据
   */
  data: {
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    that = this;
    isFirstComplate = false;

    app.globalData.tempFriend = null;// tempFriend = "obtdn5GkglAiT0LxjoTps8vrWVF4"
    //如果入口是别人分享出来的话,就可以拿到别人的openid,加入到自己的好友列表中
    if (options.openId != null) {
      //当前的好友列表
      app.globalData.tempFriend = options.openId;
      utilLog("好友id:" + app.globalData.tempFriend);
      if (app.globalData.friendOpenId == null) {
        app.globalData.friendOpenId = [];
      }
    }

    wx.showShareMenu({
      withShareTicket:true
    })
  
    app.globalData.levelCnt = 0;
    app.globalData.levelAllContent = [];
    var levelF = JSON.parse(jsonf);
    var levelS = JSON.parse(jsons);
    var level3 = JSON.parse(json3);
    // // //测试修改存档数据
    // var testData=[];
    // for (var i = 0; i < levelF.length; i++) {
    //   var varr = levelF[i];
    //   var testItem = {};
    //   testItem.s = varr.s;
    //   testItem.biglevel = varr.biglevel;
    //   testItem.levelnum = varr.levelnum;
    //   testItem.levelname = varr.levelname;
    //   testItem.levels={};
    //   for (var j = 1; j <= testItem.levelnum;j++ ){
    //     var standItem = varr.levels[""+j];
    //     var littItem = {};
    //     littItem.s = standItem.s;
    //     littItem.c = standItem.c;
    //     littItem.a=[];
    //     for (var m = 0; m < standItem.a.length;m++ ){
    //       var answer= "";
    //       var a_item = standItem.a[m];
    //       for (var n = 0; n < a_item.length;n++){
    //         answer +=a_item[n][0].toString(16);
    //         answer += a_item[n][1].toString(16);
    //       }          
    //       littItem.a[m] = (answer);
    //     }
    //     testItem.levels[""+j] = littItem;
    //   }
    //   testData[i] = testItem;
    // }
    // console.log("daguanqa关卡", JSON.stringify(testData));
    // return;
    var levelSpecial = JSON.parse(jsonSp);    
    
    app.globalData.levelAllContent[0] = levelF;
    for (var i = 0; i < levelS.length; i++) {
      app.globalData.levelAllContent[0].push(levelS[i]);
    }
    for (var i = 0; i < level3.length; i++) {
      app.globalData.levelAllContent[0].push(level3[i]);
    }
    app.globalData.levelAllContent[1] = levelSpecial;
    for (var i = 0; i < app.globalData.levelAllContent.length; i++) {
      if (app.globalData.levelCntArr == null) {
        app.globalData.levelCntArr = [];
      }
      if (app.globalData.levelCntArr[i] == null || typeof (app.globalData.levelCntArr[i]) == 'undefined') {
        app.globalData.levelCntArr[i] = [];
      }
      for (var j = 0; j < app.globalData.levelAllContent[i].length; j++) {
        if (i == 0) {
          app.globalData.levelCntArr[i][j] = app.globalData.levelAllContent[i][j].levelnum;
        }
        else {
          var m = 0;
          app.globalData.levelCntArr[i][j] = 0;
          while (m < app.globalData.levelAllContent[i][j].c.length) {
            app.globalData.levelCntArr[i][j] += app.globalData.levelAllContent[i][j].c[m].levelnum;
            m++;
          }
        }
        app.globalData.levelCnt += app.globalData.levelCntArr[i][j];
      }
    }
    // utilLog(app.globalData.levelContent);

    {
      app.globalData.gameConfig = JSON.parse(config);//res.data;
      app.globalData.bonusCfg = JSON.parse(bonusCfg);
      app.globalData.skinConfig = JSON.parse(skinConfig);
      var left = wx.getStorageSync(consts.RECORD_COINLEFT);
      app.globalData.curDayCoinLeft = app.globalData.gameConfig.maxCoinPerDay;
      app.globalData.curDayTipCoinLeft = app.globalData.gameConfig.maxCoinTipPerDay;
      if (left != null && left.length > 2) {
        var date = new Date();
        var key = date.getFullYear() + "_" + date.getMonth() + "_" + date.getDate();
        var keyTili = key + "_tili";
        var keytip = key + "_tips";
        app.globalData.LeftRecords = JSON.parse(left);
        if (app.globalData.LeftRecords != null) {
          if (typeof (app.globalData.LeftRecords[key]) != 'undefined') {
            app.globalData.curDayCoinLeft = app.globalData.LeftRecords[key];//更新每日还能分享得到的金币数
          }
          if (typeof (app.globalData.LeftRecords[keytip]) != 'undefined') {
            app.globalData.curDayTipCoinLeft = app.globalData.LeftRecords[keytip];//更新每日还能点击提示分享得到的金币数
          }
          if (typeof (app.globalData.LeftRecords[keyTili]) != 'undefined') {
            app.globalData.curDayTiliLeft = app.globalData.LeftRecords[keyTili];//更新每日还能分享得到的体力数
          }
        }
      } else {
        app.globalData.LeftRecords = new Object();
      }
      that.getOpenID();
    }

    app.globalData.levelOpenConfig = JSON.parse(openConf);
    // app.globalData.dollConfig = JSON.parse(dollConf);
  },

  // 获取用户的OpenId
  getOpenID: function () {
    wx.login({
      success: res => {
        // console.log(res);
        // app.globalData.wxloginCode = res.code;
        //调用接口
        wx.reportAnalytics('user_openid', {
          state: 1,
        });
        wx.request({//登陆
          url: app.getBaseUrl() + 'openid?code=' + res.code + '&gameId=' + consts.GAMEID ,
          //code传给后台拿到openid
          success: function (resss) {
            // console.log("注册openid",resss);
            app.globalData.openId = resss.data.openid;//拿到自己的openid
            app.globalData.sessionKey = resss.data.session_key;
            app.globalData.session = resss.data.session;
            console.log(app.globalData.openId);
            //test 
            // app.globalData.openId = 'obtdnGkglAiT0LxjoTps8vrWvF4';
            app.globalData.openIdKey = app.globalData.openId + "_1";//做为玩家存储数据的key            
            //获取玩家的所有数据
            app.getUserAllData((app.globalData.openIdKey), that.initUserData);
          },
          fail:function(){
            //调用接口
            wx.reportAnalytics('user_openid', {
              state: 0,
            });
          }
        });
      },
    })
  },


  //初始化玩家信息
  initUserData: function (key, datas) {
    //console.log("玩家所有数据回调",datas);
    if(  datas  ){
      if (datas.wxInfo && datas.wxInfo.length > 4) {
        utilLog("wxinfo回调");
        that.wxInfocallBack(key, consts.TYPE_WX, datas.wxInfo);
      } else {
        that.wxInfocallBack(key, consts.TYPE_WX, null);
      }
      if (datas.baseInfo) {
        utilLog ("baseInfo回调", datas.baseInfo);
        that.baseInfoCallBack(key, consts.TYPE_BASE, datas.baseInfo);
        if (!app.globalData.baseInfo.hasOwnProperty("appVers")){
          app.globalData.baseInfo.appVers = 34;//这批版本的前一批版本号,          
        }
      } else {
        app.globalDataToZero();
      }
      if (datas.timeCostInfo && datas.timeCostInfo.length > 0) {
        utilLog("timeCostInfo回调");
        that.timeCostInfoCallback(key, consts.TYPE_TIMECOST, datas.timeCostInfo);
      }
      if (datas.friInfo || app.globalData.tempFriend != null) {
        utilLog("friInfo回调", datas.friInfo);
        var needUpdate = false;
        if (app.globalData.tempFriend != app.globalData.openId) {
          var info;
          if (typeof (datas.friInfo) == "undefined") {
            info = [];
            info[0] = app.globalData.tempFriend;
            datas.friInfo = JSON.stringify(info).toString();
            needUpdate = true;
          } else {
            info = JSON.parse(datas.friInfo);
            if (info.indexOf(app.globalData.tempFriend) < 0) {//该id不重复存在
              info.push(app.globalData.tempFriend);
              datas.friInfo = JSON.stringify(info).toString();
              needUpdate = true;
            }
          }
          //将我也添加到对方的好友列表中
          if (app.globalData.tempFriend != null) {
            app.addUserData(app.globalData.tempFriend + "_" + consts.GAMEID, consts.TYPE_FRIENDS, app.globalData.openId, false);
          }
        }
        that.friendInfoCallBack(key, consts.TYPE_FRIENDS, datas.friInfo, needUpdate);
      }

      // 其他数据是否 皮肤啥的都存在这里
      
      if (datas.otherInfo){
        app.globalData.otherInfo = JSON.parse(datas.otherInfo);
      }else{
        app.globalData.otherInfo = { "curSkin": 0, "skinState": { "0": [3, 0], "1": [2, 0] } };
        app.globalData.sessCheckMax = 0;
        app.setUserData(key, consts.TYPE_OTHER, JSON.stringify(app.globalData.otherInfo).toString());
      }
    }
    else {
      wx.clearStorageSync(consts.RECORD_FRIEND);
      wx.clearStorageSync(consts.RECORD_RECORDS);
      wx.clearStorageSync(consts.RECORD_COINLEFT);
      that.wxInfocallBack(key, consts.TYPE_WX, null);
      app.globalDataToZero();//没有存档时,关卡的相关数据清零
      
      ///test v33版本之后注意新用户是看不到我们新增的几个关卡的新的标志
      app.globalData.baseInfo.isBigV33 = true;//是否是大于33版本号
      app.globalData.baseInfo.appVers = consts.VERSION;//这批版本的版本号,这批新增了四个大关卡包
      app.globalData.sessCheckMax = 0;
      app.setUserData(key, consts.TYPE_BASE, JSON.stringify(app.globalData.baseInfo).toString());
    }
    if(consts.OPEN_DOLL){
      this.getDollInfo();
    }else{
      wx.redirectTo({
        url: '../../package_game/index/index',
      })
    }
  },


  //微信相关数据回调
  wxInfocallBack: function (key, field, datas) {
    if (datas != null)
    {
      var datass = JSON.parse(datas);
      app.globalData.userInfo = datass;
       utilLog("用户信息:");
       utilLog(app.globalData.userInfo);
    } else {
      //玩家的信息数据长度不足时重新拉取
      {
        wx.getUserInfo({
          success: res => {
             utilLog("重新获取用户信息",res);
            app.globalData.userInfo = res.userInfo;
            app.globalData.sessCheckMax = 0;
            app.setUserData(key, field, JSON.stringify(app.globalData.userInfo).toString());
          }
        });
      }
    }
  },
  //基本信息服务器上拉取更新回调
  baseInfoCallBack: function (key, field, datas) {
    utilLog ("基本信息",datas);
    utilLog(datas);  
    var datass = JSON.parse(datas);
    if (datass == null) {
      datass = new Object();
      datass.levelId = app.globalData.levelId;
      datass.biglevel = app.globalData.biglevel;
    }
    //模拟之前的用户数据,做存档兼容
    // if(datass.levelProgress!=null){
    //   datass.levelProgress = null;
    // }

    var isneedUpdate = false;
    if (typeof (datass.coinNum) == 'undefined') {
      isneedUpdate = true;
      datass.coinNum = app.globalData.gameConfig.reginalCoin;
    }
    app.globalData.coin = datass.coinNum;

    // datass.coinNum = 1000000000000;
    /////////////test////////////////
    if (datass.levelProgress != null) {
      // datass.levelProgress[0][0] = 44;
      // datass.levelProgress[0][20] = 1;
      // datass.levelProgress[0][1] = 51;
      // datass.levelProgress[0][2] = 51;
      // datass.levelProgress[0][26] = -1;
      // datass.lvSharedCnt[0][26] = 0;
      // datass.openedLvArr[0][26] = false;
    }
    /////////////////////////////////

    app.globalData.levelId = datass.levelId;
    app.globalData.biglevel = datass.biglevel;
    app.globalData.score = datass.biglevel * 100 + datass.levelId * 10;
    utilLog("更新数据");
    utilLog("levelid:" + app.globalData.levelId);
    var lls = 0;
    if (typeof (datass.levelProgress) == 'undefined' || datass.levelProgress == null) {
      datass.levelProgress = [];
      isneedUpdate = true;
    }
    if (datass.levelProgress[app.globalData.levelType] == null || (typeof (datass.levelProgress[app.globalData.levelType])) == 'undefined') {
      datass.levelProgress[app.globalData.levelType] = [];
    }
    app.globalData.baseInfo = null;
    app.globalData.baseInfo = datass;
    // console.log("关卡进度",datass.levelProgress);
    /////////////bonus奖励./////////////////下周一版本打开
    // var awardpro = datass.awardpro;
    // if (awardpro == null || typeof (awardpro)=='undefined'){
    //   awardpro= [];
    // }
    // // console.log("奖励前", app.globalData.bonusCfg);
    
    // for (var i = app.globalData.bonusCfg.length-1; i >=0;i--){
    //   var bonus = app.globalData.bonusCfg[i];
    //   if (datass.levelProgress[bonus.lvtype] == null || (typeof (datass.levelProgress[bonus.lvtype])) == 'undefined') {
    //     datass.levelProgress[bonus.lvtype] = [];
    //   }
    //   if ((awardpro[i] == null || awardpro[i] <1 ) && datass.levelProgress[bonus.lvtype][bonus.biglvid-1] >=bonus.lvid){
    //     console.log("领取奖励 : " + bonus.lvtype + "_" + bonus.biglvid + "_" + bonus.lvid );
    //     that.getAwardLogic(bonus.awardnum,bonus.awardtype);
    //     awardpro[i] = 1;
    //     isneedUpdate = true;
    //     app.globalData.bonusCfg.splice(i,1);
    //   }
    // }
    // // console.log("奖励后", app.globalData.bonusCfg);
    // datass.awardpro = awardpro;
    ////////////////////////////////////////

    if (app.globalData.baseInfo.hasOwnProperty("musicByte")) {
      app.globalData.musicOn = app.globalData.baseInfo.musicByte;
    }
    if (isneedUpdate){// || !isChangedRecord) {
      //如果当前服务器上没有初始的体力和金币数的存档,那么给一个默认的初始数值,再发回服务器更新
      app.globalData.sessCheckMax = 0;
      app.setUserData(app.globalData.openIdKey, consts.TYPE_BASE, JSON.stringify(app.globalData.baseInfo).toString());
    }
  },

  getAwardLogic:function(cnt, awardTy){
    switch (awardTy[0]){
      case consts.AWARD_COIN:
        if (!app.globalData.baseInfo.hasOwnProperty("coinNum")){
          app.globalData.baseInfo.coinNum = app.globalData.gameConfig.reginalCoin;
        }
        app.globalData.baseInfo.coinNum += cnt;
        break;
      case consts.AWARD_DIAM:
        /*if (!app.globalData.baseInfo.hasOwnProp erty("diamCnt")) {
          app.globalData.baseInfo.diamCnt = 0;
        }
        app.globalData.baseInfo.diamCnt += cnt; */
        break;
      case consts.AWARD_FRAG://碎片
      /* if (!app.globalData.baseInfo.hasOwnProp erty("frag")) {
          app.globalData.baseInfo.frag =[];
        }
        app.globalData.baseInfo.fragawardTy[0]-1] += cnt; */
        break;
    }
  },

  //好友信息回调
  friendInfoCallBack: function (key, field, datas, needUpdate) {
    // console.log("好友信息",datas);
    if (datas) {
      var datass = JSON.parse(datas);
      var index = datass.indexOf(app.globalData.openId);
      if (index >= 0) {
        datass.splice(index, 1);
        needUpdate = true;
      }
      var arr = [];
      for (var i = 0; i < datass.length; i++) {
        if (datass[i] != null && arr.indexOf(datass[i]) < 0) {
          arr.push(datass[i]);
        }
      }
      if (arr.length != datass.length) {
        datass = arr;
        needUpdate = true;
      }
      if (needUpdate) {
        app.globalData.sessCheckMax = 0;
        app.setUserData(key, field, JSON.stringify(datass).toString());
      }
      app.globalData.friendOpenId = datass;      
      app.getAllFriendsRankList();
    }
  },
  //
  timeCostInfoCallback: function (key, field, datas) {
    utilLog("关卡时间消耗信息");
    // utilLog(datas);
    if (datas) {
      var datass = JSON.parse(datas);
      app.globalData.selfLevelTime = datass;
    }
  },

  // 获取抓娃娃相关数据
  getDollInfo:function(){
    // app.globalData.dollInfo = {};
    // app.setDollInfoToDB();
    // app.globalData.dollConfigInfo = {};
    // app.setDollConfigToDB();
    // return;
    app.getDollInfoToDB(this.getDollInfoSuccess);
  },

  getDollInfoSuccess:function(dollInfo){
    if (!dollInfo || !dollInfo.day) {
      utilLog('doll data is null....')
      app.setDollInfo(app.getInitDollInfo());
      app.setDollInfoToDB();
    }
    else {
      app.setDollInfo(dollInfo);
      app.checkNewDate();
    }
    utilLog(dollInfo);
    wx.redirectTo({
      url: '../../package_game/index/index',
    })
  }
})